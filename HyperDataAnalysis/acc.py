import numpy as np
from scipy import io
import os
import re
# Target (test) dataset name
DATASET = "PaviaC"
# The source dataset name, that is, the dataset on which the meta-optimizers are trained
SPURCEDATASET = "KSC"
# The folder where the prediction results of each meta-optimizer are located
SOURCEDATASET_L = "" # LSTM optimizer prediction results
SOURCEDATASET_A = "" # MOE-A prediction results
SOURCEDATASET_E = ""# MOE-U optimizer prediction results
# key: paviaU, pavia, [salinas_corrected, salinas_gt], [salinasA_corrected,salinasA_gt]
gtPth = ' '# ground truth label path
gt = io.loadmat(gtPth)['pavia_gt'] # label array name
gt = np.asarray(gt)
if DATASET == "SalinasA":
    gt[np.nonzero(gt == 10)] = 2
    gt[np.nonzero(gt == 11)] = 3
    gt[np.nonzero(gt == 12)] = 4
    gt[np.nonzero(gt == 13)] = 5
    gt[np.nonzero(gt == 14)] = 6

gt_classes = set(gt.flatten().tolist())
# read file names
predict_norm_path = "../NormResults/"+DATASET+"/" # human-designed optimizers's prediction results, in a folder
predict_file_name_list = os.listdir(predict_norm_path)
predict_file_adam_list = []
predict_file_adagrad_list = []
predict_file_rmspros_list = []
predict_file_sgd_list = []
predict_file_sgdm_list = []

for name in predict_file_name_list:
    if re.match(r"pre.*Adam.*",name):
        predict_file_adam_list.append(name)
    elif re.match(r"pre.*AdaGrad.*",name):
        predict_file_adagrad_list.append(name)
    elif re.match(r"pre.*RMSprop.*", name):
        predict_file_rmspros_list.append(name)
    elif re.match(r"pre.*SGD_.*", name):
        predict_file_sgd_list.append(name)
    elif re.match(r"pre.*SGDMomentum.*", name):
        predict_file_sgdm_list.append(name)

predict_file_ALL_list = []
predict_file_ALL_list.append(predict_file_adam_list)
predict_file_ALL_list.append(predict_file_adagrad_list)
predict_file_ALL_list.append(predict_file_rmspros_list)
predict_file_ALL_list.append(predict_file_sgd_list)
predict_file_ALL_list.append(predict_file_sgdm_list)
optimizer_name = ["Adam","AdaGrad","RMSprop","SGD","SGDM"]

# Calculate the prediction accuracy for each class, by norm optimizers
for op_name, predict_list in zip(optimizer_name, predict_file_ALL_list):
    print(op_name)
    for i in range(1, len(gt_classes)):
        class_i_total = np.sum(gt == i)
        class_i_acc = []
        for name_run in predict_list:
            predict_file = np.load(predict_norm_path+name_run)
            predict_file[gt!=i] = 0
            class_i_acc.append(np.sum(predict_file==i)/class_i_total)
        print(i, round(np.mean(class_i_acc),4), round(np.std(class_i_acc),4))

# Compute each class accuracy, generated by LSTM optimizer
predict_LstmO_path = "../LstmOptimizerResults/"+DATASET+"/"+SOURCEDATASET_L+"/"
predict_file_name_list = os.listdir(predict_LstmO_path)
predict_file_LstmO_list = []
for name in predict_file_name_list:
    if re.match(r"pre.*", name):
        predict_file_LstmO_list.append(name)
print("LSTM optimizer")
for i in range(1, len(gt_classes)):
    class_i_total = np.sum(gt == i)
    class_i_acc = []
    for name_run in predict_file_LstmO_list:
        predict_file = np.load(predict_LstmO_path+name_run)
        predict_file[gt!=i] = 0
        class_i_acc.append(np.sum(predict_file==i)/class_i_total)
    #print(class_i_acc)
    print(i, round(np.mean(class_i_acc),4), round(np.std(class_i_acc),4))

# MOE-A
predict_MetaOEA_path = "../LstmOpAverageResults/"+DATASET+"/"+SOURCEDATASET_A+"/"
predict_file_name_list = os.listdir(predict_MetaOEA_path)
predict_file_MetaOEA_list = []
for name in predict_file_name_list:
    if re.match(r"pre.*", name):
        predict_file_MetaOEA_list.append(name)
print("MOE-A")
for i in range(1, len(gt_classes)):
    class_i_total = np.sum(gt == i)
    class_i_acc = []
    for name_run in predict_file_MetaOEA_list:
        predict_file = np.load(predict_MetaOEA_path+name_run)
        predict_file[gt!=i] = 0
        class_i_acc.append(np.sum(predict_file==i)/class_i_total)
    print(i, round(np.mean(class_i_acc),4), round(np.std(class_i_acc),4))

# MOE-L
predict_MetaOEL_path = "../LstmOpEnsembleResults/"+DATASET+"/"+SOURCEDATASET_E+"/"
predict_file_name_list = os.listdir(predict_MetaOEL_path)
predict_file_MetaOEL_list = []
for name in predict_file_name_list:
    if re.match(r"pre.*", name):
        predict_file_MetaOEL_list.append(name)
print("MOE-L")
for i in range(1, len(gt_classes)):
    class_i_total = np.sum(gt == i)
    class_i_acc = []
    for name_run in predict_file_MetaOEL_list:
        predict_file = np.load(predict_MetaOEL_path+name_run)
        predict_file[gt!=i] = 0
        class_i_acc.append(np.sum(predict_file==i)/class_i_total)
    print(i, round(np.mean(class_i_acc),4), round(np.std(class_i_acc),4))

# OA， by norm optimizers
for op_name, predict_list in zip(optimizer_name, predict_file_ALL_list):
    OA = []
    for name_run in predict_list:
        predict_file = np.load(predict_norm_path + name_run)
        OA.append(np.sum(predict_file[gt != 0] == gt[gt!=0])/np.sum(gt != 0))
    print("OA:",op_name,round(np.mean(OA),4), round(np.std(OA),4))
# 计算OA，by LSTM optimizer
OA = []
for name_run in predict_file_LstmO_list:
    predict_file = np.load(predict_LstmO_path + name_run)
    OA.append(np.sum(predict_file[gt != 0] == gt[gt!=0])/np.sum(gt != 0))
print("OA:Lstm optimizer",round(np.mean(OA),4), round(np.std(OA),4))
# OA，by MOE-A
OA = []
for name_run in predict_file_MetaOEA_list:
    predict_file = np.load(predict_MetaOEA_path + name_run)
    OA.append(np.sum(predict_file[gt != 0] == gt[gt!=0])/np.sum(gt != 0))
print("OA:MOE-A",round(np.mean(OA),4), round(np.std(OA),4))
# OA，by MOE-U
OA = []
for name_run in predict_file_MetaOEL_list:
    predict_file = np.load(predict_MetaOEL_path + name_run)
    OA.append(np.sum(predict_file[gt != 0] == gt[gt!=0])/np.sum(gt != 0))
print("OA:MOE-U",round(np.mean(OA),4), round(np.std(OA),4))

# AA，by norm optimizers
for op_name, predict_list in zip(optimizer_name, predict_file_ALL_list):
    AA = []
    for name_run in predict_list:
        class_acc = []
        for i in range(1, len(gt_classes)):
            class_i_total = np.sum(gt == i)
            predict_file = np.load(predict_norm_path + name_run)
            predict_file[gt!=i] = 0
            class_acc.append(np.sum(predict_file==i)/class_i_total)
        AA.append(np.mean(class_acc))
    print("AA:",op_name,round(np.mean(AA),4), round(np.std(AA),4))

# AA，by LSTM optimizer
AA = []
for name_run in predict_file_LstmO_list:
    class_acc = []
    for i in range(1, len(gt_classes)):
        class_i_total = np.sum(gt == i)
        predict_file = np.load(predict_LstmO_path + name_run)
        predict_file[gt!=i] = 0
        class_acc.append(np.sum(predict_file==i)/class_i_total)
    AA.append(np.mean(class_acc))
print("AA: LSTM optimizer",round(np.mean(AA),4), round(np.std(AA),4))
# AA，By MOE-A
AA = []
for name_run in predict_file_MetaOEA_list:
    class_acc = []
    for i in range(1, len(gt_classes)):
        class_i_total = np.sum(gt == i)
        predict_file = np.load(predict_MetaOEA_path + name_run)
        predict_file[gt!=i] = 0
        class_acc.append(np.sum(predict_file==i)/class_i_total)
    AA.append(np.mean(class_acc))
print("AA: MOE-A",round(np.mean(AA),4), round(np.std(AA),4))
# AA，By MOE-U
AA = []
for name_run in predict_file_MetaOEL_list:
    class_acc = []
    for i in range(1, len(gt_classes)):
        class_i_total = np.sum(gt == i)
        predict_file = np.load(predict_MetaOEL_path + name_run)
        predict_file[gt!=i] = 0
        class_acc.append(np.sum(predict_file==i)/class_i_total)
    AA.append(np.mean(class_acc))
print("AA: MOE-U",round(np.mean(AA),4), round(np.std(AA),4))

# def of kappa
def kappa(confusion_matrix):
    pe_rows = np.sum(confusion_matrix, axis=0)
    pe_cols = np.sum(confusion_matrix, axis=1)
    sum_total = sum(pe_cols)
    pe = np.dot(pe_rows, pe_cols)/float(sum_total**2)
    po = np.trace(confusion_matrix)/float(sum_total)
    return (po-pe)/(1-pe)
# kappa by norm optimizers
for op_name, predict_list in zip(optimizer_name, predict_file_ALL_list):
    KA = []
    for name_run in predict_list:
        confusion_matrix = np.zeros((len(gt_classes)-1,len(gt_classes)-1))
        for i in range(1, len(gt_classes)):
            predict_file = np.load(predict_norm_path + name_run)
            predict_file[gt!=i] = 0
            for j in range(1, len(gt_classes)):
                confusion_matrix[i-1,j-1] = np.sum(predict_file==j)
        KA.append(kappa(confusion_matrix))
    print("Kappa:", op_name, round(np.mean(KA),4), round(np.std(KA),4))

# kappa by LSTM optimizer
KA = []
for name_run in predict_file_LstmO_list:
    confusion_matrix = np.zeros((len(gt_classes)-1,len(gt_classes)-1))
    for i in range(1, len(gt_classes)):
        predict_file = np.load(predict_LstmO_path + name_run)
        predict_file[gt!=i] = 0
        for j in range(1, len(gt_classes)):
            confusion_matrix[i-1,j-1] = np.sum(predict_file==j)
    KA.append(kappa(confusion_matrix))
print("Kappa: LSTM optimizer", round(np.mean(KA),4), round(np.std(KA),4))
# kappa by MOE-A
KA = []
for name_run in predict_file_MetaOEA_list:
    confusion_matrix = np.zeros((len(gt_classes)-1,len(gt_classes)-1))
    for i in range(1, len(gt_classes)):
        predict_file = np.load(predict_MetaOEA_path + name_run)
        predict_file[gt!=i] = 0
        for j in range(1, len(gt_classes)):
            confusion_matrix[i-1,j-1] = np.sum(predict_file==j)
    KA.append(kappa(confusion_matrix))
print("Kappa: MOE-A", round(np.mean(KA),4), round(np.std(KA),4))

# kappa by MOE-U
KA = []
for name_run in predict_file_MetaOEL_list:
    confusion_matrix = np.zeros((len(gt_classes)-1,len(gt_classes)-1))
    for i in range(1, len(gt_classes)):
        predict_file = np.load(predict_MetaOEL_path + name_run)
        predict_file[gt!=i] = 0
        for j in range(1, len(gt_classes)):
            confusion_matrix[i-1,j-1] = np.sum(predict_file==j)
    KA.append(kappa(confusion_matrix))
print("Kappa: MOE-U", round(np.mean(KA),4), round(np.std(KA),4))